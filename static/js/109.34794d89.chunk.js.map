{"version":3,"file":"static/js/109.34794d89.chunk.js","mappings":"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","sources":["components/CreateForm/CreateForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport Select from \"react-select-virtualized\";\nimport { requestDecklist } from \"../../actions\";\nimport \"./CreateForm.css\";\n\nfunction CreateForm() {\n  const { deckDetails } = useSelector((state) => state.requestDecklist);\n  const [partners, setPartners] = useState([]);\n  const [commanders, setCommanders] = useState([]);\n  const [singlePartner, setSinglePartner] = useState([]);\n  const [selectedOptionMain, setSelectedOptionMain] = useState();\n  const [selectedOptionPartner, setSelectedOptionPartner] = useState();\n  const [isPartner, setIsPartner] = useState(false);\n  const [isWithPartner, setIsWithPartner] = useState(\"\");\n  const [deckName, setDeckName] = useState(\"\");\n  const [deckDescription, setDeckDescription] = useState(\"\");\n  const [deckId, setDeckId] = useState(0);\n  const [invalid, setInvalid] = useState(false);\n  const { userId } = useSelector((state) => state.loginStatus);\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}/commanders`)\n      .then((response) => response.json())\n      .then((loadedCards) => {\n        if (loadedCards.length) {\n          const comm = loadedCards.map((commander) => {\n            return {\n              value: commander.cardName,\n              label: commander.cardName,\n              isPartner: commander.isPartner,\n              text: commander.oracle_text,\n            };\n          });\n          const part = loadedCards\n            .filter(\n              (partner) =>\n                partner.isPartner &&\n                !partner.oracle_text.includes(\"Partner with\")\n            )\n            .map((partner) => {\n              return { value: partner.cardName, label: partner.cardName };\n            });\n          setCommanders(comm);\n          setPartners(part);\n          setSinglePartner([{ value: isWithPartner, label: isWithPartner }]);\n        }\n      })\n      .catch();\n  }, [setCommanders, setPartners, setSinglePartner, isWithPartner]);\n\n  useEffect(() => {\n    if (location.pathname !== \"/adddeck\") {\n      setSelectedOptionMain({\n        label: deckDetails.commander,\n        value: deckDetails.commander,\n      });\n      setDeckDescription(deckDetails.description);\n      setDeckName(deckDetails.deckName);\n      if (deckDetails.partner) {\n        setSelectedOptionPartner({\n          label: deckDetails.partner,\n          value: deckDetails.partner,\n        });\n        setIsPartner(true);\n      }\n    }\n  }, [\n    location,\n    setDeckDescription,\n    setDeckName,\n    setIsPartner,\n    setSelectedOptionMain,\n    setSelectedOptionPartner,\n    deckDetails,\n  ]);\n\n  const createDeck = (e) => {\n    e.preventDefault();\n    const fetchUrl = `${process.env.REACT_APP_API_URL}/${\n      location.pathname !== \"/adddeck\"\n        ? `editdeck/${deckDetails.deckID}`\n        : \"createdeck\"\n    }`;\n    fetch(fetchUrl, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        userID: userId,\n        deckName: deckName,\n        commander: selectedOptionMain && selectedOptionMain.value,\n        deckDescription: deckDescription,\n        partner: selectedOptionPartner && selectedOptionPartner.value,\n      }),\n    })\n      .then((response) => response.json())\n      .then((deckID) => {\n        if (location.pathname === \"/adddeck\") {\n          setDeckId(deckID);\n        } else {\n          dispatch(requestDecklist(deckDetails.deckID, userId));\n        }\n      })\n      .catch(setInvalid(true));\n  };\n\n  const handleChangeMain = (selectedOption) => {\n    setSelectedOptionMain(selectedOption);\n    if (selectedOption && selectedOption.isPartner) {\n      setIsPartner(true);\n      setIsWithPartner(\"\");\n      if (selectedOption.text.includes(`Partner with`))\n        setIsWithPartner(\n          selectedOption.text.substring(13, selectedOption.text.indexOf(\" (\"))\n        );\n    } else {\n      setIsPartner(false);\n      setSelectedOptionPartner(null);\n    }\n  };\n\n  const handleChangePartner = (selectedOption) => {\n    setSelectedOptionPartner(selectedOption);\n  };\n\n  const filterOption = (option, input) => {\n    if (\n      option.value\n        .toLowerCase()\n        .replace(/'|,|-/g, \"\")\n        .includes(input.toLowerCase().replace(/'|,|-/g, \"\"))\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const SelectFunc = (options, handleChange, defaultVal) => {\n    return (\n      <Select\n        maxMenuHeight={200}\n        defaultValue={defaultVal}\n        options={options}\n        placeholder=\"Select your commander\"\n        onChange={handleChange}\n        filterOption={filterOption}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            text: \"orangered\",\n            primary25: \"indigo\",\n            primary: \"indigo\",\n            fontsize: \"10px\",\n          },\n        })}\n      />\n    );\n  };\n\n  return (\n    <>\n      {deckId ? (\n        <Redirect to={`/decklist/${deckId}`} />\n      ) : (\n        <div className=\"outer-create-container\">\n          <div className=\"new-deck\">\n            <div className=\"banner\">\n              <h1>Deck Details</h1>\n            </div>\n            <div className=\"new-deck-form\">\n              <input\n                onChange={(e) => setDeckName(e.target.value)}\n                value={deckName}\n                type=\"text\"\n                placeholder=\"Deck Name\"\n                id=\"deckName\"\n              />\n              {SelectFunc(commanders, handleChangeMain, selectedOptionMain)}\n              {isPartner\n                ? SelectFunc(\n                    isWithPartner.length ? singlePartner : partners,\n                    handleChangePartner,\n                    selectedOptionPartner\n                  )\n                : null}\n              <textarea\n                onChange={(e) => setDeckDescription(e.target.value)}\n                value={deckDescription}\n                placeholder=\"Your deck in a few words...\"\n              />\n              {invalid && (\n                <div className=\"invalid\">\n                  Please make sure a commander is selected and you have chosen a\n                  name for your deck.\n                </div>\n              )}\n              <input\n                onClick={(e) => createDeck(e)}\n                type=\"submit\"\n                id=\"new-deck-button\"\n                value={location.pathname === \"/adddeck\" ? \"build\" : \"edit\"}\n              />\n            </div>\n            <div className=\"bottom-banner\" />\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default CreateForm;\n"],"names":["deckDetails","useSelector","state","requestDecklist","useState","partners","setPartners","commanders","setCommanders","singlePartner","setSinglePartner","selectedOptionMain","setSelectedOptionMain","selectedOptionPartner","setSelectedOptionPartner","isPartner","setIsPartner","isWithPartner","setIsWithPartner","deckName","setDeckName","deckDescription","setDeckDescription","deckId","setDeckId","invalid","setInvalid","userId","loginStatus","location","useLocation","dispatch","useDispatch","useEffect","fetch","process","REACT_APP_API_URL","then","response","json","loadedCards","length","comm","map","commander","value","cardName","label","text","oracle_text","part","filter","partner","includes","catch","pathname","description","filterOption","option","input","toLowerCase","replace","SelectFunc","options","handleChange","defaultVal","maxMenuHeight","defaultValue","placeholder","onChange","theme","borderRadius","colors","primary25","primary","fontsize","to","className","e","target","type","id","selectedOption","substring","indexOf","onClick","preventDefault","fetchUrl","deckID","method","headers","body","JSON","stringify","userID","createDeck"],"sourceRoot":""}