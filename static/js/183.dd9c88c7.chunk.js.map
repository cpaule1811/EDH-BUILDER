{"version":3,"file":"static/js/183.dd9c88c7.chunk.js","mappings":"6KAcA,MAVA,YAAuC,IAAhBA,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC5B,OACE,gBAAKC,UAAU,oBAAf,SACGF,EAAMG,KAAI,SAACC,EAAMC,GAChB,OAAO,SAACC,EAAA,EAAD,CAAyBC,KAAMH,EAAMH,KAAMA,GAAzBI,U,2ICmGjC,MAtGA,WACE,OAA0BG,EAAAA,EAAAA,UAAS,QAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,CAAEG,IAAK,MAAOC,KAAM,QAAzD,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAgCC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,mBAArDC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAkCZC,EAAa,WACjB,MAAiB,SAAVX,EAAmBS,EAAWC,GAGjCE,EAAWD,IAAajB,KAAI,SAACC,GAAD,OAAUA,EAAKO,OAC3CW,GAAa,OAAI,IAAIC,IAAIF,IAAWG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAE7D,OACE,yBACGR,GACC,iCACE,iBAAKhB,UAAU,SAAf,WACE,wCACA,oBACEyB,SAAU,SAACC,GACTd,GAAU,kBAAKD,GAAN,IAAcF,IAAK,SAC5BD,EAASkB,EAAEC,OAAOC,QAEpBA,MAAOrB,EACPP,UAAU,YANZ,WAQE,mBAAQ4B,MAAM,OAAd,mBACA,mBAAQA,MAAM,YAAd,2BAEF,oBACEH,SAAU,SAACC,GAAD,OAAOd,GAAU,kBAAKD,GAAN,IAAcD,KAAMgB,EAAEC,OAAOC,UACvDA,MAAOjB,EAAOD,KACdV,UAAU,YAHZ,WAKE,mBAAQ4B,MAAO,MAAf,0BACA,mBAAQA,MAAM,WAAd,uBACA,mBAAQA,MAAM,UAAd,sBACA,mBAAQA,MAAM,UAAd,sBACA,mBAAQA,MAAM,eAAd,2BACA,mBAAQA,MAAM,cAAd,0BACA,mBAAQA,MAAM,WAAd,uBACA,mBAAQA,MAAM,OAAd,sBAEF,oBACEH,SAAU,SAACC,GAAD,OAAOd,GAAU,kBAAKD,GAAN,IAAcF,IAAKiB,EAAEC,OAAOC,UACtDA,MAAOjB,EAAOF,IACdT,UAAU,YAHZ,WAKE,mBAAQ4B,MAAO,MAAf,iBACCR,EAAWnB,KAAI,SAACC,EAAM2B,GACrB,OACE,mBAAgBD,MAAO1B,EAAvB,SACGA,GADU2B,UAMnB,mBAAQC,QAAS,kBA5DzBtB,EAAS,aACTI,EAAU,CAAEH,IAAK,MAAOC,KAAM,SA2DiBV,UAAU,gBAAjD,uBAIF,SAAC+B,EAAA,EAAD,CAAajC,MA5DI,SAACS,GACxB,OAtBiB,SAACA,GAClB,GAAoB,QAAhBI,EAAOD,KAAgB,CACzB,IAAIsB,EAAWzB,EAAMI,QAAO,SAACT,GAAD,OAAUA,EAAKQ,KAAKuB,SAAStB,EAAOD,SAChE,OACEC,EAAOD,KAAKuB,SAAS,gBACrBtB,EAAOD,KAAKuB,SAAS,YAEdD,EACJrB,QAAO,SAACT,GAAD,OAAWA,EAAKQ,KAAKuB,SAAS,eACrCtB,QAAO,SAACT,GAAD,OAAWA,EAAKQ,KAAKuB,SAAS,WAEnCD,EAET,OAAOzB,EASA2B,CA7BS,SAAC3B,GACjB,MAAmB,QAAfI,EAAOF,IACFF,EAAMI,QAAO,SAACT,GAAD,OAAUiC,OAAOjC,EAAKO,OAAS0B,OAAOxB,EAAOF,QAE5DF,EAyBW6B,CAAU7B,IA2DF8B,CAAiBnB,KAAenB,KAAM,WAG5D","sources":["components/CardGallery/CardGallery.js","components/DeckListImg/DeckListImg.js"],"sourcesContent":["import React from \"react\";\nimport DisplayCard from \"../DisplayCard/DisplayCard\";\nimport \"./CardGallery.css\";\n\nfunction CardGallery({ Cards, view }) {\n  return (\n    <div className=\"gallery-container\">\n      {Cards.map((item, index) => {\n        return <DisplayCard key={index} card={item} view={view} />;\n      })}\n    </div>\n  );\n}\n\nexport default CardGallery;\n","import React, { useState } from \"react\";\nimport \"./DeckListImg.css\";\nimport CardGallery from \"../CardGallery/CardGallery\";\nimport { useSelector } from \"react-redux\";\n\nfunction DeckListImg() {\n  const [board, setBoard] = useState(\"main\");\n  const [filter, setFilter] = useState({ cmc: \"all\", type: \"all\" });\n  const { decklist, sideboard } = useSelector((state) => state.requestDecklist);\n\n  const filterCmc = (board) => {\n    if (filter.cmc !== \"all\") {\n      return board.filter((item) => Number(item.cmc) === Number(filter.cmc));\n    }\n    return board;\n  };\n\n  const filterType = (board) => {\n    if (filter.type !== \"all\") {\n      let filtered = board.filter((item) => item.type.includes(filter.type));\n      if (\n        filter.type.includes(\"Enchantment\") ||\n        filter.type.includes(\"Artifact\")\n      ) {\n        return filtered\n          .filter((item) => !item.type.includes(\"Creature\"))\n          .filter((item) => !item.type.includes(\"Land\"));\n      }\n      return filtered;\n    }\n    return board;\n  };\n\n  const clearFilters = () => {\n    setBoard(\"main\");\n    setFilter({ cmc: \"all\", type: \"all\" });\n  };\n\n  const filteredDecklist = (board) => {\n    return filterType(filterCmc(board));\n  };\n\n  const checkBoard = () => {\n    return board === \"main\" ? decklist : sideboard;\n  };\n\n  const cmcArray = checkBoard().map((item) => item.cmc);\n  const cmcOptions = [...new Set(cmcArray)].sort((a, b) => a - b);\n\n  return (\n    <div>\n      {decklist ? (\n        <>\n          <div className=\"center\">\n            <h5>Filter By:</h5>\n            <select\n              onChange={(e) => {\n                setFilter({ ...filter, cmc: \"all\" });\n                setBoard(e.target.value);\n              }}\n              value={board}\n              className=\"filter-by\"\n            >\n              <option value=\"main\">Main</option>\n              <option value=\"sideboard\">Sideboard</option>\n            </select>\n            <select\n              onChange={(e) => setFilter({ ...filter, type: e.target.value })}\n              value={filter.type}\n              className=\"filter-by\"\n            >\n              <option value={\"all\"}>Select Type</option>\n              <option value=\"Creature\">Creature</option>\n              <option value=\"Instant\">Instant</option>\n              <option value=\"Sorcery\">Sorcery</option>\n              <option value=\"Planeswalker\">Planeswalker</option>\n              <option value=\"Enchantment\">Enchantment</option>\n              <option value=\"Artifact\">Artifact</option>\n              <option value=\"Land\">Land</option>\n            </select>\n            <select\n              onChange={(e) => setFilter({ ...filter, cmc: e.target.value })}\n              value={filter.cmc}\n              className=\"filter-by\"\n            >\n              <option value={\"all\"}>CMC</option>\n              {cmcOptions.map((item, i) => {\n                return (\n                  <option key={i} value={item}>\n                    {item}\n                  </option>\n                );\n              })}\n            </select>\n            <button onClick={() => clearFilters()} className=\"clear-filters\">\n              CLEAR\n            </button>\n          </div>\n          <CardGallery Cards={filteredDecklist(checkBoard())} view={null} />\n        </>\n      ) : (\n        <div>Use the search bar to find cards to add</div>\n      )}\n    </div>\n  );\n}\n\nexport default DeckListImg;\n"],"names":["Cards","view","className","map","item","index","DisplayCard","card","useState","board","setBoard","cmc","type","filter","setFilter","useSelector","state","requestDecklist","decklist","sideboard","checkBoard","cmcArray","cmcOptions","Set","sort","a","b","onChange","e","target","value","i","onClick","CardGallery","filtered","includes","filterType","Number","filterCmc","filteredDecklist"],"sourceRoot":""}