{"version":3,"file":"static/js/714.64200097.chunk.js","mappings":"6KAcA,MAVA,YAAuC,IAAhBA,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC5B,OACE,gBAAKC,UAAU,oBAAf,SACGF,EAAMG,KAAI,SAACC,EAAMC,GAChB,OAAO,SAACC,EAAA,EAAD,CAAyBC,KAAMH,EAAMH,KAAMA,GAAzBI,U,iIC6CjC,MA/CA,WACE,IAAQG,GAAgBC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,mBAA7CH,YACR,GAAiDI,EAAAA,EAAAA,UAAS,IAA1D,eAAOC,EAAP,KAAyBC,EAAzB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACRC,MAAM,GAAD,OACAC,yCADA,sBAC2CX,EAAYY,UADvD,YACoEZ,EAAYa,UAElFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACDA,GACFX,EAAqBY,OAAOC,QAAQF,IAEtCT,GAAW,QAEd,CAACR,KAGF,yBACGO,GACC,gBAAKb,UAAU,UAAU0B,IAAKC,EAAAA,EAAQC,IAAI,8BACxCjB,EAAiBkB,OACnBlB,EAAiBV,KAAI,SAACC,EAAM4B,GAC1B,OAAI5B,EAAK,GAAG2B,QAER,4BACE,gBAAK7B,UAAU,QAAf,UACE,kBAAM+B,GAAG,QAAT,iBAAsB7B,EAAK,SAE7B,SAAC8B,EAAA,EAAD,CAAalC,MAAOI,EAAK,GAAIH,KAAK,QAAS,MAJnC+B,GAQP,SAGT,iBAAK9B,UAAU,iBAAf,mEACuD,mBACrD,kBAFF","sources":["components/CardGallery/CardGallery.js","components/Recommended/Recommended.js"],"sourcesContent":["import React from \"react\";\nimport DisplayCard from \"../DisplayCard/DisplayCard\";\nimport \"./CardGallery.css\";\n\nfunction CardGallery({ Cards, view }) {\n  return (\n    <div className=\"gallery-container\">\n      {Cards.map((item, index) => {\n        return <DisplayCard key={index} card={item} view={view} />;\n      })}\n    </div>\n  );\n}\n\nexport default CardGallery;\n","import \"./Recommended.css\";\nimport React, { useState, useEffect } from \"react\";\nimport CardGallery from \"../CardGallery/CardGallery\";\nimport { useSelector } from \"react-redux\";\nimport loader from \"../../icons/spinner.svg\";\n\nfunction Recommended() {\n  const { deckDetails } = useSelector((state) => state.requestDecklist);\n  const [recommendedCards, setReccommendedCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\n      `${process.env.REACT_APP_API_URL}/recommend/${deckDetails.commander}/${deckDetails.partner}`\n    )\n      .then((response) => response.json())\n      .then((cards) => {\n        if (cards) {\n          setReccommendedCards(Object.entries(cards));\n        }\n        setLoading(false);\n      });\n  }, [deckDetails]);\n\n  return (\n    <div>\n      {loading ? (\n        <img className=\"spinner\" src={loader} alt=\"loading recommended cards\" />\n      ) : recommendedCards.length ? (\n        recommendedCards.map((item, i) => {\n          if (item[1].length) {\n            return (\n              <div key={i}>\n                <div className=\"title\">\n                  <span id=\"title\">Top {item[0]}</span>\n                </div>\n                <CardGallery Cards={item[1]} view=\"add\" />{\" \"}\n              </div>\n            );\n          }\n          return null;\n        })\n      ) : (\n        <div className=\"no-recommended\">\n          Looks like no one has built with this commander yet. <br />\n          <br />\n          Go on be a trailblazer!\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Recommended;\n"],"names":["Cards","view","className","map","item","index","DisplayCard","card","deckDetails","useSelector","state","requestDecklist","useState","recommendedCards","setReccommendedCards","loading","setLoading","useEffect","fetch","process","commander","partner","then","response","json","cards","Object","entries","src","loader","alt","length","i","id","CardGallery"],"sourceRoot":""}